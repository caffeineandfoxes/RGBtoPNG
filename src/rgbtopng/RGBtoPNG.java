/*
 * The MIT License
 *
 * Copyright 2015 David Fink.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package rgbtopng;

import javax.swing.*;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import static java.awt.image.BufferedImage.TYPE_INT_RGB;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author David Fink
 */
public class RGBtoPNG extends javax.swing.JFrame {

    private int red = 50;
    private int green = 50;
    private int blue = 50;
    private String rgbString;
    private int imageWidth = 50;
    private int imageHeight = 50;
    private JFileChooser fileChooser = new javax.swing.JFileChooser();
    private String savePath = "";
    private BufferedImage outputImage;
    private File outputFile;
    private File outputDir;
    private Graphics2D g2D;
    private Color outputColor;
    private File rgbFile = new File("rgbValueArray.rgb");
    private RGBFileGenerator rgbFileGen = new RGBFileGenerator();

    /**
     * Creates new form RGBtoPNG
     */
    public RGBtoPNG() {
        initComponents();

        //checks if the file rgbValueArray.rgb exists, and if it does not exist,
        //the application will generate a copy
        if (!rgbFile.exists()) {
            try {
                rgbFileGen.writeRGBFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error generating RGB file. "
                        + "Please restart the application to utilize the "
                        + "'Generate All' functionality.",
                        "Error Generating RGB File", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        titleHeader = new javax.swing.JLabel();
        colorPreview = new javax.swing.JPanel();
        rSlider = new javax.swing.JSlider();
        gSlider = new javax.swing.JSlider();
        bSlider = new javax.swing.JSlider();
        genButton = new javax.swing.JButton();
        redLabel = new javax.swing.JLabel();
        greenLabel = new javax.swing.JLabel();
        blueLabel = new javax.swing.JLabel();
        redValueLabel = new javax.swing.JLabel();
        greenValueLabel = new javax.swing.JLabel();
        blueValueLabel = new javax.swing.JLabel();
        genAllButton = new javax.swing.JButton();
        genSamplerButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        sizeChangerMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(400, 475));
        setMinimumSize(new java.awt.Dimension(400, 475));
        setPreferredSize(new java.awt.Dimension(400, 475));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titleHeader, org.jdesktop.beansbinding.ELProperty.create("${text}"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleHeader.setFont(new java.awt.Font("Droid Sans", 0, 24)); // NOI18N
        titleHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleHeader.setText("RGBtoPNG");
        getContentPane().add(titleHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 150, -1));

        colorPreview.setBackground(new java.awt.Color(254, 254, 254));
        colorPreview.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        colorPreview.setMaximumSize(new java.awt.Dimension(100, 100));
        colorPreview.setMinimumSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout colorPreviewLayout = new javax.swing.GroupLayout(colorPreview);
        colorPreview.setLayout(colorPreviewLayout);
        colorPreviewLayout.setHorizontalGroup(
            colorPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        colorPreviewLayout.setVerticalGroup(
            colorPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );

        getContentPane().add(colorPreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, -1, -1));

        rSlider.setMaximum(255);
        rSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rSliderStateChanged(evt);
            }
        });
        getContentPane().add(rSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, 250, -1));

        gSlider.setMaximum(255);
        gSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gSliderStateChanged(evt);
            }
        });
        getContentPane().add(gSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 251, -1));

        bSlider.setMaximum(255);
        bSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bSliderStateChanged(evt);
            }
        });
        getContentPane().add(bSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, 251, -1));

        genButton.setBackground(new java.awt.Color(41, 180, 26));
        genButton.setText("Generate");
        genButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genButtonActionPerformed(evt);
            }
        });
        getContentPane().add(genButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, -1, -1));

        redLabel.setText("Red");
        getContentPane().add(redLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 40, -1));

        greenLabel.setText("Green");
        getContentPane().add(greenLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 40, -1));

        blueLabel.setText("Blue");
        getContentPane().add(blueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 40, -1));

        redValueLabel.setText("50");
        getContentPane().add(redValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        greenValueLabel.setText("50");
        getContentPane().add(greenValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, -1, -1));

        blueValueLabel.setText("50");
        getContentPane().add(blueValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 270, -1, -1));

        genAllButton.setText("Generate All");
        genAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genAllButtonActionPerformed(evt);
            }
        });
        getContentPane().add(genAllButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, -1, -1));

        genSamplerButton.setText("Generate Sampler");
        genSamplerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genSamplerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(genSamplerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 330, -1, -1));

        fileMenu.setText("File");
        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        sizeChangerMenuItem.setText("Change Output Size");
        sizeChangerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeChangerMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(sizeChangerMenuItem);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void genButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genButtonActionPerformed
        //get rgb values and assign to rgbString
        red = rSlider.getValue();
        green = gSlider.getValue();
        blue = bSlider.getValue();
        rgbString = "" + red + "-" + green + "-" + blue;

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showDialog(null, "Select Output Directory");
        outputDir = fileChooser.getSelectedFile();
        try {
            savePath = outputDir.getCanonicalPath();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "The application could "
                    + "not get the specified path. Please try again.",
                    "Could Not Get Path", JOptionPane.ERROR_MESSAGE);
        }

        outputImage = new BufferedImage(imageWidth, imageHeight, TYPE_INT_RGB);
        outputFile = new File(savePath + "/" + rgbString + ".png");
        if (!outputFile.exists()) {
            g2D = outputImage.createGraphics();
            outputColor = new Color(red, green, blue);
            g2D.setColor(outputColor);
            g2D.fillRect(0, 0, imageWidth, imageHeight);
            try {
                ImageIO.write(outputImage, "PNG", outputFile);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "The application could "
                        + "not generate the file. Please try again.",
                        "Could Not Generate File", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_genButtonActionPerformed

    private void rSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rSliderStateChanged
        red = rSlider.getValue();
        colorPreview.setBackground(new Color(red, green, blue));
        redValueLabel.setText(Integer.toString(red));
    }//GEN-LAST:event_rSliderStateChanged

    private void gSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gSliderStateChanged
        green = gSlider.getValue();
        colorPreview.setBackground(new Color(red, green, blue));
        greenValueLabel.setText(Integer.toString(green));
    }//GEN-LAST:event_gSliderStateChanged

    private void bSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bSliderStateChanged
        blue = bSlider.getValue();
        colorPreview.setBackground(new Color(red, green, blue));
        blueValueLabel.setText(Integer.toString(blue));
    }//GEN-LAST:event_bSliderStateChanged

    private void genAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genAllButtonActionPerformed
        //warn users that the operation may take a while to complete
        JOptionPane.showMessageDialog(null, "This operation may take a while to "
                + "complete, please allow the application time to generate the files",
                "Long Operation Warning", JOptionPane.WARNING_MESSAGE);

        //declare and initialize a String array of size 16777216 to store all
        //RGB values recorded in the RGB values file
        String[] rgbVals = new String[16777216];

        //check that the file containing all RGB values exists, then if it
        //exists, run the file generation
        if (rgbFile.exists()) {
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fileChooser.showDialog(null, "Select Output Directory");
            outputDir = fileChooser.getSelectedFile();

            try {
                rgbVals = rgbFileGen.readRGBFile();
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error reading RGB file. "
                        + "Please restart the application to utilize the "
                        + "'Generate All' functionality.",
                        "Error Reading RGB File", JOptionPane.ERROR_MESSAGE);
            }

            for (int i = 0; i < rgbVals.length; i++) {
                String[] rgbVal = rgbVals[i].split(",");
                red = Integer.parseInt(rgbVal[0]);
                green = Integer.parseInt(rgbVal[1]);
                blue = Integer.parseInt(rgbVal[2]);
                rgbString = "" + red + "-" + green + "-" + blue;

                try {
                    savePath = outputDir.getCanonicalPath();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "The application could "
                            + "not get the specified path. Please try again.",
                            "Could Not Get Path", JOptionPane.ERROR_MESSAGE);
                }

                outputImage = new BufferedImage(imageWidth, imageHeight, TYPE_INT_RGB);
                outputFile = new File(savePath + "/" + rgbString + ".png");
                if (!outputFile.exists()) {
                    g2D = outputImage.createGraphics();
                    outputColor = new Color(red, green, blue);
                    g2D.setColor(outputColor);
                    g2D.fillRect(0, 0, imageWidth, imageHeight);
                    try {
                        ImageIO.write(outputImage, "PNG", outputFile);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "The application could "
                                + "not generate the file. Please try again.",
                                "Could Not Generate File", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "File generation complete!",
                    "File Generation Complete", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_genAllButtonActionPerformed

    private void genSamplerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSamplerButtonActionPerformed
        //warn users that the operation may take a while to complete
        JOptionPane.showMessageDialog(null, "This operation may take a while to "
                + "complete, please allow the application time to generate the files",
                "Long Operation Warning", JOptionPane.WARNING_MESSAGE);

        //declare and initialize a String array of size 16777216 to store all
        //RGB values recorded in the RGB values file
        String[] rgbVals = new String[16777216];

        //check that the file containing all RGB values exists, then if it
        //exists, run the file generation
        if (rgbFile.exists()) {
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fileChooser.showDialog(null, "Select Output Directory");
            outputDir = fileChooser.getSelectedFile();

            try {
                rgbVals = rgbFileGen.readRGBFile();
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error reading RGB file. "
                        + "Please restart the application to utilize the "
                        + "'Generate All' functionality.",
                        "Error Reading RGB File", JOptionPane.ERROR_MESSAGE);
            }

            for (int i = 0; i < rgbVals.length; i += 1000) {
                String[] rgbVal = rgbVals[i].split(",");
                red = Integer.parseInt(rgbVal[0]);
                green = Integer.parseInt(rgbVal[1]);
                blue = Integer.parseInt(rgbVal[2]);
                rgbString = "" + red + "-" + green + "-" + blue;

                try {
                    savePath = outputDir.getCanonicalPath();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "The application could "
                            + "not get the specified path. Please try again.",
                            "Could Not Get Path", JOptionPane.ERROR_MESSAGE);
                }

                outputImage = new BufferedImage(imageWidth, imageHeight, TYPE_INT_RGB);
                outputFile = new File(savePath + "/" + rgbString + ".png");
                if (!outputFile.exists()) {
                    g2D = outputImage.createGraphics();
                    outputColor = new Color(red, green, blue);
                    g2D.setColor(outputColor);
                    g2D.fillRect(0, 0, imageWidth, imageHeight);
                    try {
                        ImageIO.write(outputImage, "PNG", outputFile);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "The application could "
                                + "not generate the file. Please try again.",
                                "Could Not Generate File", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "File generation complete!",
                    "File Generation Complete", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_genSamplerButtonActionPerformed

    private void sizeChangerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeChangerMenuItemActionPerformed
        JPanel sizeOptionsPanel = new JPanel(new FlowLayout());
        JLabel widthLabel = new JLabel("Width (px)");
        JLabel heightLabel = new JLabel("Height (px)");
        JTextField widthField = new JTextField(3);
        JTextField heightField = new JTextField(3);
        sizeOptionsPanel.add(widthLabel);
        sizeOptionsPanel.add(widthField);
        sizeOptionsPanel.add(heightLabel);
        sizeOptionsPanel.add(heightField);
        JOptionPane.showConfirmDialog(null, sizeOptionsPanel,
                "Enter the width and height values for output:",
                JOptionPane.OK_CANCEL_OPTION);
        this.imageWidth = Integer.parseInt(widthField.getText());
        this.imageHeight = Integer.parseInt(heightField.getText());
    }//GEN-LAST:event_sizeChangerMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RGBtoPNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RGBtoPNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RGBtoPNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RGBtoPNG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RGBtoPNG().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider bSlider;
    private javax.swing.JLabel blueLabel;
    private javax.swing.JLabel blueValueLabel;
    private javax.swing.JPanel colorPreview;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSlider gSlider;
    private javax.swing.JButton genAllButton;
    private javax.swing.JButton genButton;
    private javax.swing.JButton genSamplerButton;
    private javax.swing.JLabel greenLabel;
    private javax.swing.JLabel greenValueLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSlider rSlider;
    private javax.swing.JLabel redLabel;
    private javax.swing.JLabel redValueLabel;
    private javax.swing.JMenuItem sizeChangerMenuItem;
    private javax.swing.JLabel titleHeader;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
